#1) << Method - Adds items to an array
#What does the << keyword do? How could you use it to add Patrick Star to the list of characters:

spongebob_characters = ["Sandy Cheeks", "Mr. Krabs", "Plankton", "Mrs. Puff"]

#Items can be added to the end of an array by using either push or <<

spongebob_characters << "Patrick Star"

puts spongebob_characters



#2) & Method
#Public Instance Method
#Research the & method. What can we use this for? Show an example with the following two arrays.

#krusty_krab_employees = ["Spongebob Squarepants", "Patrick Star", "Squidward Tentacles"]

#bikini_bottom_residents = ["Gary", "Spongebob Squarepants", "Larry the Lobster", "Patrick Star", "Squidward Tentacles"]

#ary & other_ary → new_ary
#Set Intersection — Returns a new array containing elements common to the two arrays, excluding any duplicates.
#The order is preserved from the original array.

krusty_krab_employees = ["Spongebob Squarepants", "Patrick Star", "Squidward Tentacles"] & bikini_bottom_residents = ["Gary", "Spongebob Squarepants", "Larry the Lobster", "Patrick Star", "Squidward Tentacles"]

#=> ["Spongebob Squarepants", "Patrick Star", "Squidward Tentacles"]

#3. cycle Method

#Take a look at the docs for the cycle Ruby method. Write a method using cycle that will print the following array 5 times.

im_ready = ["IIIIII'm READY!", "I'm ready", "I'm ready, I'm ready", "I'M READY!"]

#cycle(n=nil) { |obj| block } → nil
#cycle(n=nil) → Enumerator
#Calls the given block for each element n times or forever if nil is given.

#Does nothing if a non-positive number is given or the array is empty.

#Returns nil if the loop has finished without getting interrupted.

#If no block is given, an Enumerator is returned instead.

im_ready.cycle(5) { |x| puts x }

#4. rindex Method

#Review documentation for the rindex method. Use it to find the index of Gary and Larry the Lobster from the bikini_bottom_residents array.
bikini_bottom_residents = ["Gary", "Spongebob Squarepants", "Larry the Lobster", "Patrick Star", "Squidward Tentacles"]

bikini_bottom_residents.rindex("Gary")
bikini_bottom_residents.rindex { |x| x == "Larry the Lobster" }
#rindex(obj) → int or nil
#rindex { |item| block } → int or nil
#rindex → Enumerator
#Returns the index of the last object in self == to obj.

#If a block is given instead of an argument, returns the index of the first object for which the block returns true, starting from the last object.

#Returns nil if no match is found.

#If neither block nor argument is given, an Enumerator is returned instead.

#5. | Method

#Checkout the | method. How can we use it to grab the unique values between the krusty_krab_employees and bikini_bottom_residents arrays?
krusty_krab_employees = ["Spongebob Squarepants", "Patrick Star", "Squidward Tentacles"] | bikini_bottom_residents = ["Gary", "Spongebob Squarepants", "Larry the Lobster", "Patrick Star", "Squidward Tentacles"]
puts krusty_krab_employees | bikini_bottom_residents
#=> ["Spongebob Squarepants", "Patrick Star", "Squidward Tentacles", "Gary", "Larry the Lobster"]
#ary | other_ary → new_ary click to toggle source
#Set Union — Returns a new array by joining ary with other_ary, excluding any duplicates and preserving the order from the original array.

#6. First and Last

#Which methods could you use to grab the first and last elements from the spongebob_characters array?
spongebob_characters = ["Sandy Cheeks", "Mr. Krabs", "Plankton", "Mrs. Puff"].first
spongebob_characters = ["Sandy Cheeks", "Mr. Krabs", "Plankton", "Mrs. Puff"].last

#7. Sort

#Find a method to sort the bikini_bottom_residents array by the last letter of each character's name
bikini_bottom_residents = ["Gary", "Spongebob Squarepants", "Larry the Lobster", "Patrick Star", "Squidward Tentacles"]
bikini_bottom_residents.sort { |x, y| x[-1] <=> y[-1] }
bikini_bottom_residents.sort_by { |x| x[-1] }
sort → new_ary
sort { |a, b| block } → new_ary

#Returns a new array created by sorting self.
#Comparisons for the sort will be done using the <=> operator or using an optional code block.
#The block must implement a comparison between a and b, and return -1, when a follows b, 0 when a and b are equivalent, or +1 if b follows a.

#sort_by! { |obj| block } → ary click to toggle source
#sort_by! → Enumerator
#Sorts self in place using a set of keys generated by mapping the values in self through the given block.
#If no block is given, an Enumerator is returned instead.

#8. Negative index

#im_ready[0] gives you the first element of the im_ready array. What does im_ready[-1] give you? Grab each element in the array using a negative index.
im_ready = ["IIIIII'm READY!", "I'm ready", "I'm ready, I'm ready", "I'M READY!"]

#puts im_ready[-1]
#puts im_ready[-2]
#puts im_ready[-3]
#puts im_ready[-4]

im_ready.values_at(-1, -2, -3, -4)
